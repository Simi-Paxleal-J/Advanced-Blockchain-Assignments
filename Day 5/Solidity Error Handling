Following are some of the important methods used in error handling −

Throw-
The throw keyword is now being deprecated, and eventually will be removed altogether. Fortunately, 
the new functions assert(), require(), and revert() provide the same functionality, with a much cleaner syntax.
Syntax- if(msg.sender != owner) { throw; }

Examples--
1.If you divide or modulo by zero (e.g. 5 / 0 or 23 % 0).
2.If you shift by a negative amount.
3.If you access an array or an array slice at a too large or negative index (i.e. x[i] where i >= x.length or i < 0).
4.If you access a fixed-length bytesN at a too large or negative index.
5.If you call assert with an argument that evaluates to false.
  Syntax-assert(msg.sender == owner);
  
Require-

1.Calling require with an argument that evaluates to false.
2.If you call a function via a message call but it does not finish properly (i.e., it runs out of gas, has no matching function, or throws an exception itself),
  except when a low level operation call, send, delegatecall, callcode or staticcall is used. 
  The low level operations never throw exceptions but indicate failures by returning false.
3.If you create a contract using the new keyword but the contract creation does not finish properly.
4.If you perform an external function call targeting a contract that contains no code.
5.If your contract receives Ether via a public function without payable modifier (including the constructor and the fallback function).
6.If your contract receives Ether via a public getter function.
7.If a .transfer() fails.

Syntax-require(msg.sender == owner);



REVERT-
REVERT will still undo all state changes, but it will be handled differently than an “invalid opcode” in two ways:
It will allow you to return a value.
It will refund any remaining gas to the caller.

Syntax-if(msg.sender != owner) { revert(); }
